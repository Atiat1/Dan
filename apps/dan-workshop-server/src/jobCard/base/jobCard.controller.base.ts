/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobCardService } from "../jobCard.service";
import { JobCardCreateInput } from "./JobCardCreateInput";
import { JobCard } from "./JobCard";
import { JobCardFindManyArgs } from "./JobCardFindManyArgs";
import { JobCardWhereUniqueInput } from "./JobCardWhereUniqueInput";
import { JobCardUpdateInput } from "./JobCardUpdateInput";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceWhereUniqueInput } from "../../invoice/base/InvoiceWhereUniqueInput";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { ServiceWhereUniqueInput } from "../../service/base/ServiceWhereUniqueInput";

export class JobCardControllerBase {
  constructor(protected readonly service: JobCardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobCard })
  async createJobCard(
    @common.Body() data: JobCardCreateInput
  ): Promise<JobCard> {
    return await this.service.createJobCard({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        jobNumber: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobCard] })
  @ApiNestedQuery(JobCardFindManyArgs)
  async jobCards(@common.Req() request: Request): Promise<JobCard[]> {
    const args = plainToClass(JobCardFindManyArgs, request.query);
    return this.service.jobCards({
      ...args,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        jobNumber: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobCard(
    @common.Param() params: JobCardWhereUniqueInput
  ): Promise<JobCard | null> {
    const result = await this.service.jobCard({
      where: params,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        jobNumber: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobCard(
    @common.Param() params: JobCardWhereUniqueInput,
    @common.Body() data: JobCardUpdateInput
  ): Promise<JobCard | null> {
    try {
      return await this.service.updateJobCard({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          description: true,
          id: true,
          jobNumber: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobCard(
    @common.Param() params: JobCardWhereUniqueInput
  ): Promise<JobCard | null> {
    try {
      return await this.service.deleteJobCard({
        where: params,
        select: {
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          description: true,
          id: true,
          jobNumber: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/invoices")
  @ApiNestedQuery(InvoiceFindManyArgs)
  async findInvoices(
    @common.Req() request: Request,
    @common.Param() params: JobCardWhereUniqueInput
  ): Promise<Invoice[]> {
    const query = plainToClass(InvoiceFindManyArgs, request.query);
    const results = await this.service.findInvoices(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        invoiceNumber: true,

        jobCard: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoices")
  async connectInvoices(
    @common.Param() params: JobCardWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        connect: body,
      },
    };
    await this.service.updateJobCard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoices")
  async updateInvoices(
    @common.Param() params: JobCardWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        set: body,
      },
    };
    await this.service.updateJobCard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoices")
  async disconnectInvoices(
    @common.Param() params: JobCardWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        disconnect: body,
      },
    };
    await this.service.updateJobCard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/services")
  @ApiNestedQuery(ServiceFindManyArgs)
  async findServices(
    @common.Req() request: Request,
    @common.Param() params: JobCardWhereUniqueInput
  ): Promise<Service[]> {
    const query = plainToClass(ServiceFindManyArgs, request.query);
    const results = await this.service.findServices(params.id, {
      ...query,
      select: {
        cost: true,
        createdAt: true,
        description: true,
        id: true,

        jobCard: {
          select: {
            id: true,
          },
        },

        serviceDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/services")
  async connectServices(
    @common.Param() params: JobCardWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        connect: body,
      },
    };
    await this.service.updateJobCard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/services")
  async updateServices(
    @common.Param() params: JobCardWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        set: body,
      },
    };
    await this.service.updateJobCard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/services")
  async disconnectServices(
    @common.Param() params: JobCardWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        disconnect: body,
      },
    };
    await this.service.updateJobCard({
      where: params,
      data,
      select: { id: true },
    });
  }
}
